# ${PROJECT_NAME} - Universal Makefile with Port Management
# Generated from Claude Templates

# Include port configuration
-include .ports.env
export

# Default shell
SHELL := /bin/bash

# Colors for output
RED := \033[0;31m
GREEN := \033[0;32m
YELLOW := \033[1;33m
BLUE := \033[0;34m
NC := \033[0m # No Color

# Default target
.PHONY: help
help:
	@echo "$(BLUE)${PROJECT_NAME} - Available Commands$(NC)"
	@echo "=================================="
	@echo ""
	@echo "$(GREEN)Port Management:$(NC)"
	@echo "  make init-ports      - Initialize port configuration"
	@echo "  make check-ports     - Check port availability"
	@echo "  make free-port       - Free a specific port"
	@echo ""
	@echo "$(GREEN)Development:$(NC)"
	@echo "  make dev             - Start development servers"
	@echo "  make test            - Run tests"
	@echo "  make lint            - Run linters"
	@echo "  make format          - Format code"
	@echo ""
	@echo "$(GREEN)Docker:$(NC)"
	@echo "  make docker-build    - Build Docker images"
	@echo "  make docker-up       - Start Docker services"
	@echo "  make docker-down     - Stop Docker services"
	@echo ""
	@echo "$(GREEN)Utilities:$(NC)"
	@echo "  make clean           - Clean build artifacts"
	@echo "  make install         - Install dependencies"

# Port Management Commands
.PHONY: init-ports check-ports free-port

init-ports:
	@echo "$(BLUE)Initializing port configuration...$(NC)"
	@python3 ~/.claude-templates/scripts/port-manager.py init .
	@echo "$(GREEN)✓ Port configuration created in .ports.env$(NC)"

check-ports:
	@echo "$(BLUE)Checking port availability...$(NC)"
	@if [ -f .ports.env ]; then \
		echo "$(GREEN)Project ports:$(NC)"; \
		cat .ports.env | grep -E "^[A-Z]+_PORT="; \
		echo ""; \
	else \
		echo "$(YELLOW)No .ports.env found. Run 'make init-ports' first.$(NC)"; \
	fi
	@echo "$(BLUE)System port status:$(NC)"
	@python3 ~/.claude-templates/scripts/port-manager.py status | grep -E "$(shell basename $(CURDIR))" || echo "No ports registered for this project"

free-port:
	@read -p "Enter port to free: " port; \
	python3 ~/.claude-templates/scripts/port-manager.py free $$port

# Development Commands
.PHONY: dev test lint format

dev: check-ports
	@echo "$(BLUE)Starting development servers...$(NC)"
	@echo "Web UI: http://localhost:$${WEB_PORT:-8000}"
	@echo "API: http://localhost:$${API_PORT:-8080}"
	@# Add your dev server commands here
	@# Example for Node.js:
	@# npm run dev
	@# Example for Python:
	@# python -m uvicorn main:app --port $${API_PORT:-8080} --reload

test:
	@echo "$(BLUE)Running tests...$(NC)"
	@# Add your test commands here

lint:
	@echo "$(BLUE)Running linters...$(NC)"
	@# Add your lint commands here

format:
	@echo "$(BLUE)Formatting code...$(NC)"
	@# Add your format commands here

# Docker Commands
.PHONY: docker-build docker-up docker-down docker-logs

docker-build:
	@echo "$(BLUE)Building Docker images...$(NC)"
	@docker-compose build

docker-up: check-ports
	@echo "$(BLUE)Starting Docker services...$(NC)"
	@docker-compose up -d
	@echo "$(GREEN)Services started!$(NC)"
	@docker-compose ps

docker-down:
	@echo "$(BLUE)Stopping Docker services...$(NC)"
	@docker-compose down

docker-logs:
	@docker-compose logs -f

# Installation
.PHONY: install install-deps

install: install-deps init-ports
	@echo "$(GREEN)✓ Installation complete!$(NC)"

install-deps:
	@echo "$(BLUE)Installing dependencies...$(NC)"
	@# Add your dependency installation here
	@# Example for Node.js:
	@# npm install
	@# Example for Python:
	@# pip install -r requirements.txt

# Cleanup
.PHONY: clean clean-all

clean:
	@echo "$(BLUE)Cleaning build artifacts...$(NC)"
	@# Add cleanup commands here
	@find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
	@find . -type f -name "*.pyc" -delete 2>/dev/null || true
	@rm -rf .pytest_cache 2>/dev/null || true
	@rm -rf node_modules/.cache 2>/dev/null || true

clean-all: clean
	@echo "$(YELLOW)Removing all generated files...$(NC)"
	@rm -rf node_modules
	@rm -rf venv
	@rm -rf .env
	@echo "$(GREEN)✓ Cleanup complete!$(NC)"

# Utilities
.PHONY: env-example

env-example:
	@echo "$(BLUE)Creating .env.example from .ports.env...$(NC)"
	@cp .ports.env .env.example 2>/dev/null || echo "Run 'make init-ports' first"
	@echo "# Add your environment variables below:" >> .env.example
	@echo "$(GREEN)✓ Created .env.example$(NC)"

# Quick status check
.PHONY: status

status: check-ports
	@echo ""
	@echo "$(BLUE)Project Status:$(NC)"
	@echo "==============="
	@# Add project-specific status checks here
	@echo "$(GREEN)✓ Ready$(NC)"

# Include project-specific targets if they exist
-include Makefile.local