============================================================
CLAUDE.md DRY RUN REPORT
============================================================
Generated: 2025-07-07 14:32:15

SUMMARY
--------------------
‚úÖ Added sections: 4
‚ùå Removed sections: 1
üìù Modified sections: 7
‚ö†Ô∏è  Conflicts: 0
üö´ Policy violations: 2

ADDED SECTIONS
--------------------
+ Docker Multi-Stage Patterns (from: company)
+ Kubernetes Best Practices (from: company)
+ React Hook Guidelines (from: project)
+ Local Development Shortcuts (from: developer)

REMOVED SECTIONS
--------------------
- Legacy Code Patterns (was from: universal)

MODIFIED SECTIONS
--------------------
~ Python Virtual Environment
  Before: universal
  After: company
~ Testing Standards
  Before: universal
  After: company
~ Security Practices
  Before: universal
  After: company
~ API Design Patterns
  Before: universal
  After: project
~ Git Workflow
  Before: company
  After: project
~ Code Review Process
  Before: company
  After: developer
~ Debugging Setup
  Before: project
  After: developer

‚ö†Ô∏è  POLICY VIOLATIONS
--------------------
‚ùå Section: Security Practices
   Policy: Cannot override company policy
   Attempted by: project
‚ùå Section: Testing Standards
   Policy: Cannot override company policy
   Attempted by: developer

PREVIEW (first 50 lines)
--------------------
# CLAUDE.md - Generated 2025-07-07 14:32:15

*This file is auto-generated from 3-tier template system. Do not edit directly.*

## Project Overview
Tech stack, architecture, and key decisions

## ‚ö†Ô∏è CRITICAL: Python Virtual Environment (venv)
**ALWAYS check for and use virtual environment before installing Python packages!**

```bash
# Check if venv is activated
if [[ "$VIRTUAL_ENV" != "" ]]; then
    echo "‚úÖ Virtual environment is active: $VIRTUAL_ENV"
else
    echo "‚ùå ERROR: No virtual environment active!"
    # Check common locations
    if [ -d "venv" ]; then
        echo "Found venv/ - activating..."
        source venv/bin/activate
    elif [ -d ".venv" ]; then
        echo "Found .venv/ - activating..."
        source .venv/bin/activate
    else
        echo "Creating new virtual environment..."
        python -m venv venv
        source venv/bin/activate
    fi
fi

# Now safe to install
pip install -r requirements.txt
```

## Docker Multi-Stage Patterns
Best practices for efficient Docker builds

### Python Multi-Stage Example
```dockerfile
# Stage 1: Build dependencies
FROM python:3.11-slim as builder
WORKDIR /build
COPY requirements.txt .
RUN pip wheel --no-cache-dir --no-deps --wheel-dir /wheels -r requirements.txt

# Stage 2: Runtime
FROM python:3.11-slim
WORKDIR /app
... (truncated)